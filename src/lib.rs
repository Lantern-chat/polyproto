// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use asn1_rs::{Any, Oid};

/// Represents a signature algorithm usable in X.509-like environments.
pub trait SignatureAlgorithm {
    /// Object ID notation of this signature algorithm
    fn oid(&self) -> Oid;
    /// Parameters for this signature algorithm. The contents of this parameters field will vary
    /// according to the algorithm identified.
    fn parameters(&self) -> Option<Any<'_>>;
    /// The signature algorithms' common name
    fn name(&self) -> &str;
}

/// A signature value, generated using a [`SignatureAlgorithm`]
pub trait Signature<T: SignatureAlgorithm> {
    /// The signature value in bytes
    fn signature(&self) -> &[u8];
    /// The [`SignatureAlgorithm`] used to create this signature.
    fn algorithm(&self) -> T;
}

/// A cryptographic private key generated by a [`SignatureAlgorithm`], with
/// a corresponding [`PublicKey`]
pub trait PrivateKey<T: SignatureAlgorithm> {
    type PublicKey: PublicKey<T>;
    type Signature: Signature<T>;
    /// The private key as bytes.
    fn to_bytes(&self) -> &[u8];
    /// The public key corresponding to this private key.
    fn pubkey(&self) -> Self::PublicKey;
    /// Creates a [`Signature`] for the given data.
    fn sign(&self, data: &[u8]) -> Self::Signature;
}

/// A cryptographic public key generated by a [`SignatureAlgorithm`].
pub trait PublicKey<T: SignatureAlgorithm> {
    type Signature: Signature<T>;
    /// The public key as bytes.
    fn to_bytes(&self) -> &[u8];
    /// Verify the correctness of a given [`Signature`] for a given piece of data.
    fn verify_signature(&self, signature: Self::Signature, data: &[u8]) -> bool;
}
