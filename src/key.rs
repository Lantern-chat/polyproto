// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.

use crate::signature::Signature;

/// A cryptographic private key generated by a [SignatureAlgorithm], with
/// a corresponding [PublicKey]
pub trait PrivateKey<S: Signature>: PartialEq + Eq {
    type PrivateKey;
    type PublicKey: PublicKey<S>;
    /// Returns a shared reference to [Self::PrivateKey]
    fn key(&self) -> &Self::PrivateKey;
    /// Returns an exclusive reference to [Self::PrivateKey]
    fn key_mut(&mut self) -> &mut Self::PrivateKey;
    /// Returns the public key corresponding to this private key.
    fn pubkey(&self) -> &Self::PublicKey;
    /// Creates a [Signature] for the given data.
    fn sign(&self, data: &[u8]) -> S;
    /// Returns the private key encoded as `ASN.1 DER`, according to the
    /// [`PKCS#8`](https://mbed-tls.readthedocs.io/en/latest/kb/cryptography/asn1-key-structures-in-der-and-pem/#public-key-file-pkcs-8)
    /// standard.
    ///
    /// ## Note for implementers:
    ///
    /// Verify, that this method returns proper `PKCS#8`-formatted data in all scenarios.
    fn to_der(&self) -> Result<Vec<u8>, der::Error>;
    fn algorithm(&self) -> S::SignatureAlgorithm;
}

/// A cryptographic public key generated by a [SignatureAlgorithm].
pub trait PublicKey<S: Signature>: PartialEq + Eq {
    type PublicKey;
    type Error;
    /// Returns a shared reference to [Self::PublicKey]
    fn key(&self) -> &Self::PublicKey;
    /// Returns an exclusive reference to [Self::PublicKey]
    fn key_mut(&mut self) -> &mut Self::PublicKey;
    /// Verifies the correctness of a given [Signature] for a given piece of data.
    ///
    /// Implementations of this associated method should mitigate against signature malleability
    fn verify_signature(&self, signature: &S, data: &[u8]) -> Result<(), Self::Error>;
    /// Returns the public key encoded as `ASN.1 DER`, according to the
    /// [`PKCS#8`](https://mbed-tls.readthedocs.io/en/latest/kb/cryptography/asn1-key-structures-in-der-and-pem/#public-key-file-pkcs-8)
    /// standard.
    ///
    /// ## Note for implementers:
    ///
    /// Verify, that this method returns proper `PKCS#8`-formatted data in all scenarios.
    fn to_der(&self) -> Result<Vec<u8>, der::Error>;
    fn algorithm(&self) -> S::SignatureAlgorithm;
}
